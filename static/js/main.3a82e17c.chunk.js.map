{"version":3,"sources":["components/Header.js","components/Cards.js","components/Cryptos.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Cards","stock","class","src","image","symbol","toUpperCase","name","current_price","toLocaleString","style","currency","price_change_percentage_24h","toFixed","price_change_24h","aria-hidden","Cryptos","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAWeA,G,KATA,WACX,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,yCAAd,eACA,wBAAIA,UAAU,uCAAd,uECwBGC,EA5BD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,OACI,yBAAKC,MAAM,2CACP,yBAAKH,UAAU,yBACX,6BACI,yBAAKA,UAAU,QACX,yBAAKI,IAAKF,EAAMG,MAAOL,UAAU,sBACjC,uBAAGA,UAAU,0DAA0DE,EAAMI,OAAOC,gBAExF,uBAAGP,UAAU,yBAAyBE,EAAMM,OAGhD,yBAAKR,UAAU,yCACX,uBAAGA,UAAU,oCAAoCE,EAAMO,cAAcC,eAAe,QAAS,CAACC,MAAO,WAAYC,SAAU,SAC3H,yBAAKZ,UAAU,IACX,0BAAMA,UAAU,yCAAhB,IAA0DE,EAAMW,4BAA4BC,QAAQ,GAApG,MACA,0BAAMd,UAAU,yCAAyCE,EAAMa,iBAAiBL,eAAe,QAAS,CAACC,MAAO,WAAYC,SAAU,QAAtI,IAA+I,uBAAGT,MAAM,oBAAoBa,cAAY,aAKpM,gCCYGC,EAhCC,WAyBZ,OACI,yBAAKjB,UAAU,0BACX,kBAAC,EAAD,CAAOE,MA1BD,CACV,GAAM,UACN,OAAU,MACV,KAAQ,UACR,MAAS,2EACT,cAAiB,QACjB,WAAc,aACd,gBAAmB,EACnB,aAAgB,YAChB,SAAY,QACZ,QAAW,QACX,kBAAqB,aACrB,6BAAgC,QAChC,uBAA0B,iBAC1B,kCAAqC,QACrC,mBAAsB,SACtB,aAAgB,KAChB,IAAO,SACP,uBAA0B,SAC1B,SAAY,2BACZ,IAAO,KACP,aAAgB,gCCXTgB,MATf,WACE,OACE,yBAAKlB,UAAU,yBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a82e17c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className=\"mt-8 mb-8\">\r\n            <h2 className=\"font-bold text-gray-800 text-5xl mb-2\">CryptoWatch</h2>\r\n            <h4 className=\"font-semibold text-gray-600 text-xl\">Displays the top coins by marketcap and the top gainers & losers</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Cards = ({ stock }) => {\r\n    return (\r\n        <div class=\"max-w rounded overflow-hidden shadow-lg\">\r\n            <div className=\"bg-green-300 p-5 flex\">\r\n                <div>\r\n                    <div className=\"flex\">\r\n                        <img src={stock.image} className=\"w-8 h-8 mr-1 mt-2\" />\r\n                        <p className=\"text-gray-900 text-3xl h-10 leading-lead font-semibold\">{stock.symbol.toUpperCase()}</p>\r\n                    </div>\r\n                    <p className=\"text-gray-700 text-xl\">{stock.name}</p>\r\n                </div>\r\n                \r\n                <div className=\"ml-auto text-gray-800 text-right mt-1\">\r\n                    <p className=\"text-3xl leading-tight font-bold\">{stock.current_price.toLocaleString('en-US', {style: 'currency', currency: 'USD'})}</p>\r\n                    <div className=\"\">\r\n                        <span className=\"ml-1 text-green-800 font-bold text-lg\">({stock.price_change_percentage_24h.toFixed(2)}%)</span>\r\n                        <span className=\"ml-1 text-green-800 font-bold text-lg\">{stock.price_change_24h.toLocaleString('en-US', {style: 'currency', currency: 'USD'})} <i class=\"fas fa-arrow-down\" aria-hidden=\"true\"></i></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react'\r\nimport Cards from './Cards'\r\n\r\nconst Cryptos = () => {\r\n    const stock = {\r\n        \"id\": \"bitcoin\",\r\n        \"symbol\": \"btc\",\r\n        \"name\": \"Bitcoin\",\r\n        \"image\": \"https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579\",\r\n        \"current_price\": 6093.02,\r\n        \"market_cap\": 111392183062,\r\n        \"market_cap_rank\": 1,\r\n        \"total_volume\": 37726494687,\r\n        \"high_24h\": 6426.79,\r\n        \"low_24h\": 5991.92,\r\n        \"price_change_24h\": -158.52342615,\r\n        \"price_change_percentage_24h\": -2.53575,\r\n        \"market_cap_change_24h\": -2888029643.77739,\r\n        \"market_cap_change_percentage_24h\": -2.52715,\r\n        \"circulating_supply\": 18281925,\r\n        \"total_supply\": 21000000,\r\n        \"ath\": 19665.39,\r\n        \"ath_change_percentage\": -69.44196,\r\n        \"ath_date\": \"2017-12-16T00:00:00.000Z\",\r\n        \"roi\": null,\r\n        \"last_updated\": \"2020-03-22T15:55:43.676Z\"\r\n      }\r\n\r\n    return(\r\n        <div className=\"grid grid-cols-3 gap-4\">\r\n            <Cards stock={stock}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cryptos","import React from 'react';\r\nimport './index.css';\r\nimport Header from './components/Header'\r\nimport Cryptos from './components/Cryptos'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container mx-auto m-4\">\r\n      <Header />\r\n      <Cryptos />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}